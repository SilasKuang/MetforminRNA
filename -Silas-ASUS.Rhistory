panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = c("#662d91",
"#999999", "#ed1c24")) +
xlab(expression(paste("Log"[2],"(FC)"))) +
ylab(expression(paste("-log"[10],"(FDR)"))) +
ggtitle("Volcano plot of AET+MET vs AET Control")
ggsave("Volcano_AET_vs_AET+MET.pdf", volcanoPlot, height = 4, width = 4)
View(curatedDGE_AET_vs_MET)
# Extract restrictively significant genes
sigGenes_AET_vs_MET <- curatedDGE_AET_vs_MET[,c("Symbol", "logFC","FDR")] %>%
filter(FDR < 0.01)
View(sigGenes_AET_vs_MET)
# Calculate the non-log fold change and filter out rows with values smaller than 50%
sigGenes_AET_vs_MET <- sigGenes_AET_vs_MET %>%
# log2(1.5) is about 0.58
filter(abs(logFC)>= 0.58)
if(!require(tidyverse))
install.packages("tidyverse")
if(!require(ggplot2))
install.packages("ggplot2")
library(readxl)
library(tidyverse)
library(ggplot2)
rawData <- read_excel("Metformin_RNA.xlsx", col_names = T)
# Even after simplifying the column names, they are hard to understand
# So instead of L,R,N, etc., I will call them 1,2,3 respectively
colnames(rawData) <-
c("Gene", "AET-1", "AET-2", "AET-3", "MET-1", "MET-2", "MET-3"
, "SED-1", "SED-2", "SED-3")
# Since in this experiment N=3, I would like to remove any rows with 0s
rawData[rawData == 0] <- NA
validData <- rawData %>% na.omit()
# Replace all hyphens (-) with underscores (_) in the Gene column
# to avoid ANOVA bugging itself out
validData$Gene <- gsub("-", "_", validData$Gene)
# Change the dataframe from wide form to long form
tidyNormData <- validData %>%
pivot_longer(c(2:dim(validData)[2]), names_to = "keys", values_to = "intensity") %>%
extract(keys, into = "sample", regex = "([[:alpha:]]{0,3})", remove = F) %>%
extract(keys, into = "group", regex = "([[:digit:]]{1,})", remove = T)
#See if data is normally distributed when mutated with log2
tidyNormData <- tidyNormData %>%
mutate(intensity = log2(intensity))
#Plot histogram for all intensity values.
tidyNormData %>%
ggplot(aes(x = intensity)) + geom_histogram() +
theme_bw()
#Looks pretty normal, just slightly right-skewed.
#But just to check: Make it a little more normal
tidyRNANorm <- tidyNormData %>%
group_by(sample) %>%
mutate(normIntensity = scale(intensity, center = T, scale = T))
#Widen data again from normalized state
statsRNANorm <- tidyRNANorm[,-c(4)] %>%
unite("sm", sample:group, sep = "", remove = T) %>%
# sep = 3 means the first 3 letters. This value does not matter, can be anything
separate(sm, into = "group", sep = 3, remove = F)
genRef <- statsRNANorm[,c(1)] %>% distinct()
# This is the most important step for ANOVA - grouping
groupedRNAStats <- statsRNANorm %>%
pivot_wider(names_from = "Gene", values_from = "normIntensity")
# Convert into dataframe
groupedRNAStats <- as.data.frame(groupedRNAStats)
row.names(groupedRNAStats) <- groupedRNAStats$sm
groupedRNAStats <- groupedRNAStats[,-1] %>%
mutate(group = factor(group, levels = c("AET", "MET", "SED")))
# Compare AET vs AET+MET groups
# Note: Since in this project, we have not tested for MET only
# So, MET means AET+MET unless otherwise specified
rawDGE_AET_vs_MET <- read_excel("Genes_AET_vs_AET+MET.xlsx")
curatedDGE_AET_vs_MET <- rawDGE_AET_vs_MET[,c(8,2,5,6,7)]
colnames(curatedDGE_AET_vs_MET) <- c("Symbol", "logFC", "pval", "FDR", "Group")
# Add a column named direction, to show whether this gene is UP-regulated
# or DOWN-regulated after the MET treatment
curatedDGE_AET_vs_MET <- curatedDGE_AET_vs_MET %>%
mutate("logFDR" = -log(FDR)) %>%
mutate(direction = case_when(FDR < 0.05 & logFC > 0 ~ "UP",
FDR < 0.05 & logFC < 0 ~ "DOWN",
FDR >= 0.05 ~ "NS"))
totExpressed_AET_vs_MET <- curatedDGE_AET_vs_MET %>%
tally() %>%
mutate(direction = "all trans")
sigDirection_AET_vs_MET <- curatedDGE_AET_vs_MET %>%
group_by(direction) %>%
tally()
allSig_AET_vs_MET <- curatedDGE_AET_vs_MET %>%
filter(direction != "NS") %>%
tally() %>%
mutate(direction = "normal Sig")
restrictSig_AET_vs_MET <- curatedDGE_AET_vs_MET %>%
filter(FDR <= 0.01) %>%
tally() %>%
mutate(direction = "restrictive Sig")
# Plot transcript categories
transcriptBreakdown <- bind_rows(totExpressed_AET_vs_MET, sigDirection_AET_vs_MET,
allSig_AET_vs_MET, restrictSig_AET_vs_MET)
transcriptNumsPlot <- transcriptBreakdown %>%
arrange(match(direction, c("all trans", "DOWN", "UP",
"normal Sig", "NS",
"restrictive Sig")),
desc(direction)) %>%
mutate(direction = factor(direction, levels = direction)) %>%
ggplot(aes(x = direction, y = n,
fill = direction)) + geom_col(color = "black",
size = 0.25) +
xlab("Transcript Category") + ylab("count") + theme_bw() +
theme(axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.position = "none") +
# 10000 is the number of rows in curatedDGE
scale_y_continuous(expand = c(0,0), limits = c(0, 10000)) +
geom_text(aes(label = n), vjust = -0.5) +
scale_fill_manual(values = c("black", "#808080",
"#524fa1", "#fdb913",
"red", "cyan"))
ggsave("transcriptCategories_AET_vs_MET.pdf", transcriptNumsPlot,
height = 4, width = 4)
# Plot volcano plots
volcanoPlot <- curatedDGE_AET_vs_MET %>%
ggplot(aes(logFC, logFDR, color = direction)) +
geom_point(size = 2) + theme_bw() +
theme(axis.line = element_line(color = "black"),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = c("#662d91",
"#999999", "#ed1c24")) +
xlab(expression(paste("Log"[2],"(FC)"))) +
ylab(expression(paste("-log"[10],"(FDR)"))) +
ggtitle("Volcano plot of AET+MET vs AET Control")
ggsave("Volcano_AET_vs_AET+MET.pdf", volcanoPlot, height = 4, width = 4)
# Extract restrictively significant genes
sigGenes_AET_vs_MET <- curatedDGE_AET_vs_MET[,c("Symbol", "logFC","FDR")] %>%
filter(FDR < 0.01) %>%
# Calculate the non-log fold change and filter out rows with values smaller than 50%
# log2(1.5) is about 0.5849, we take 0.58 here
filter(abs(logFC)>= 0.58)
write.csv(sigGenes, file = "sigGenes_AET_vs_MET.csv")
if(!require(tidyverse))
install.packages("tidyverse")
if(!require(ggplot2))
install.packages("ggplot2")
library(readxl)
library(tidyverse)
library(ggplot2)
rawData <- read_excel("Metformin_RNA.xlsx", col_names = T)
# Even after simplifying the column names, they are hard to understand
# So instead of L,R,N, etc., I will call them 1,2,3 respectively
colnames(rawData) <-
c("Gene", "AET-1", "AET-2", "AET-3", "MET-1", "MET-2", "MET-3"
, "SED-1", "SED-2", "SED-3")
# Since in this experiment N=3, I would like to remove any rows with 0s
rawData[rawData == 0] <- NA
validData <- rawData %>% na.omit()
# Replace all hyphens (-) with underscores (_) in the Gene column
# to avoid ANOVA bugging itself out
validData$Gene <- gsub("-", "_", validData$Gene)
# Change the dataframe from wide form to long form
tidyNormData <- validData %>%
pivot_longer(c(2:dim(validData)[2]), names_to = "keys", values_to = "intensity") %>%
extract(keys, into = "sample", regex = "([[:alpha:]]{0,3})", remove = F) %>%
extract(keys, into = "group", regex = "([[:digit:]]{1,})", remove = T)
#See if data is normally distributed when mutated with log2
tidyNormData <- tidyNormData %>%
mutate(intensity = log2(intensity))
#Plot histogram for all intensity values.
tidyNormData %>%
ggplot(aes(x = intensity)) + geom_histogram() +
theme_bw()
#Looks pretty normal, just slightly right-skewed.
#But just to check: Make it a little more normal
tidyRNANorm <- tidyNormData %>%
group_by(sample) %>%
mutate(normIntensity = scale(intensity, center = T, scale = T))
#Widen data again from normalized state
statsRNANorm <- tidyRNANorm[,-c(4)] %>%
unite("sm", sample:group, sep = "", remove = T) %>%
# sep = 3 means the first 3 letters. This value does not matter, can be anything
separate(sm, into = "group", sep = 3, remove = F)
genRef <- statsRNANorm[,c(1)] %>% distinct()
# This is the most important step for ANOVA - grouping
groupedRNAStats <- statsRNANorm %>%
pivot_wider(names_from = "Gene", values_from = "normIntensity")
# Convert into dataframe
groupedRNAStats <- as.data.frame(groupedRNAStats)
row.names(groupedRNAStats) <- groupedRNAStats$sm
groupedRNAStats <- groupedRNAStats[,-1] %>%
mutate(group = factor(group, levels = c("AET", "MET", "SED")))
# Compare AET vs AET+MET groups
# Note: Since in this project, we have not tested for MET only
# So, MET means AET+MET unless otherwise specified
rawDGE_AET_vs_MET <- read_excel("Genes_AET_vs_AET+MET.xlsx")
curatedDGE_AET_vs_MET <- rawDGE_AET_vs_MET[,c(8,2,5,6,7)]
colnames(curatedDGE_AET_vs_MET) <- c("Symbol", "logFC", "pval", "FDR", "Group")
# Add a column named direction, to show whether this gene is UP-regulated
# or DOWN-regulated after the MET treatment
curatedDGE_AET_vs_MET <- curatedDGE_AET_vs_MET %>%
mutate("logFDR" = -log(FDR)) %>%
mutate(direction = case_when(FDR < 0.05 & logFC > 0 ~ "UP",
FDR < 0.05 & logFC < 0 ~ "DOWN",
FDR >= 0.05 ~ "NS"))
totExpressed_AET_vs_MET <- curatedDGE_AET_vs_MET %>%
tally() %>%
mutate(direction = "all trans")
sigDirection_AET_vs_MET <- curatedDGE_AET_vs_MET %>%
group_by(direction) %>%
tally()
allSig_AET_vs_MET <- curatedDGE_AET_vs_MET %>%
filter(direction != "NS") %>%
tally() %>%
mutate(direction = "normal Sig")
restrictSig_AET_vs_MET <- curatedDGE_AET_vs_MET %>%
filter(FDR <= 0.01) %>%
tally() %>%
mutate(direction = "restrictive Sig")
# Plot transcript categories
transcriptBreakdown <- bind_rows(totExpressed_AET_vs_MET, sigDirection_AET_vs_MET,
allSig_AET_vs_MET, restrictSig_AET_vs_MET)
transcriptNumsPlot <- transcriptBreakdown %>%
arrange(match(direction, c("all trans", "DOWN", "UP",
"normal Sig", "NS",
"restrictive Sig")),
desc(direction)) %>%
mutate(direction = factor(direction, levels = direction)) %>%
ggplot(aes(x = direction, y = n,
fill = direction)) + geom_col(color = "black",
size = 0.25) +
xlab("Transcript Category") + ylab("count") + theme_bw() +
theme(axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.position = "none") +
# 10000 is the number of rows in curatedDGE
scale_y_continuous(expand = c(0,0), limits = c(0, 10000)) +
geom_text(aes(label = n), vjust = -0.5) +
scale_fill_manual(values = c("black", "#808080",
"#524fa1", "#fdb913",
"red", "cyan"))
ggsave("transcriptCategories_AET_vs_MET.pdf", transcriptNumsPlot,
height = 4, width = 4)
# Plot volcano plots
volcanoPlot <- curatedDGE_AET_vs_MET %>%
ggplot(aes(logFC, logFDR, color = direction)) +
geom_point(size = 2) + theme_bw() +
theme(axis.line = element_line(color = "black"),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = c("#662d91",
"#999999", "#ed1c24")) +
xlab(expression(paste("Log"[2],"(FC)"))) +
ylab(expression(paste("-log"[10],"(FDR)"))) +
ggtitle("Volcano plot of AET+MET vs AET Control")
ggsave("Volcano_AET_vs_AET+MET.pdf", volcanoPlot, height = 4, width = 4)
# Extract restrictively significant genes
sigGenes_AET_vs_MET <- curatedDGE_AET_vs_MET[,c("Symbol", "logFC","FDR")] %>%
filter(FDR < 0.01) %>%
# Calculate the non-log fold change and filter out rows with values smaller than 50%
# log2(1.5) is about 0.5849, we take 0.58 here
filter(abs(logFC)>= 0.58)
write.csv(sigGenes_AET_vs_MET, file = "sigGenes_AET_vs_MET.csv")
# Run the enrichedKEGG GSEA Pathway analysis
pathGenerate <- function(geneset, geneType){
# Map the EMSEMBL IDs to their ENTREZID
sameGenesEntrez <- na.exclude(mapIds(org.Mm.eg.db,
keys = as.character(geneset$Symbol),
keytype = "GENENAME", column = "ENTREZID"))
# Function for enrichKEGG analysis and pathway dataset generation
# By default, this works on mouse (mmu) only
allPaths <- enrichKEGG(gene = sameGenesEntrez, organism = "mmu")
write.csv(allPaths, file = paste("allPaths_",geneType,".csv",sep = ""))
allPaths <- as.data.frame(allPaths) %>%
mutate(bkgdSize =
as.numeric(substring(BgRatio,
regexpr("/", BgRatio) + 1))) %>%
mutate(pathBkgd =
as.numeric(substring(BgRatio, 1,
regexpr("/", BgRatio)-1))) %>%
mutate(bkgdPerc = pathBkgd/bkgdSize) %>%
mutate(GeneRatTotal =
as.numeric(substring(GeneRatio,
regexpr("/", GeneRatio) + 1))) %>%
mutate(percPath = Count/GeneRatTotal) %>%
mutate(Enrichment = percPath/bkgdPerc)
return(allPaths)
}
stringentPathPlot <- function(pathway, title){
pdf(paste(title,"KEGG pathways p less than 0.01.pdf",sep=" "))
plot(  pathway %>%
filter(p.adjust < 0.01) %>%
ggplot(aes(x = Enrichment, y = Description,
color = p.adjust, size = Count)) +
geom_point() + expand_limits(x = 0) +
labs(x = "Enrichment", y = "KEGG pathway",
color = "FDR", size = "Count") +
theme_bw() + scale_color_gradient(low = "#B72668",
high = "#dba3b2") +
ggtitle(paste(title,"KEGG pathways p < 0.01", sep = " ")))
dev.off()
}
relaxedPathPlot <- function(pathway, title){
pdf(paste(title,"KEGG p between 0.05 and 0.01.pdf",sep=" "))
plot(pathway %>%
filter(p.adjust < 0.05 & p.adjust >= 0.01) %>%
ggplot(aes(x = Enrichment, y = Description,
color = p.adjust, size = Count)) +
geom_point() + expand_limits(x = 0) +
labs(x = "Enrichment", y = "KEGG pathway",
color = "FDR", size = "Count") +
theme_bw() + scale_color_gradient(low = "#B72668",
high = "#dba3b2") +
ggtitle(paste(title,"KEGG pathways 0.05 < p < 0.01", sep = " ")))
dev.off()
}
allPaths_AET_vs_MET = pathGenerate(sigGenes_AET_vs_MET, "AET vs. AET+MET")
if(!require(tidyverse))
install.packages("tidyverse")
if(!require(ggplot2))
install.packages("ggplot2")
if(!require(clusterProfiler))
BiocManager::install("clusterProfiler")
if(!require(org.Mm.eg.db))
BiocManager::install("org.Mm.eg.db")
library(readxl)
library(tidyverse)
library(ggplot2)
library(clusterProfiler)
library(org.Mm.eg.db)
rawData <- read_excel("Metformin_RNA.xlsx", col_names = T)
# Even after simplifying the column names, they are hard to understand
# So instead of L,R,N, etc., I will call them 1,2,3 respectively
colnames(rawData) <-
c("Gene", "AET-1", "AET-2", "AET-3", "MET-1", "MET-2", "MET-3"
, "SED-1", "SED-2", "SED-3")
# Since in this experiment N=3, I would like to remove any rows with 0s
rawData[rawData == 0] <- NA
validData <- rawData %>% na.omit()
# Replace all hyphens (-) with underscores (_) in the Gene column
# to avoid ANOVA bugging itself out
validData$Gene <- gsub("-", "_", validData$Gene)
# Change the dataframe from wide form to long form
tidyNormData <- validData %>%
pivot_longer(c(2:dim(validData)[2]), names_to = "keys", values_to = "intensity") %>%
extract(keys, into = "sample", regex = "([[:alpha:]]{0,3})", remove = F) %>%
extract(keys, into = "group", regex = "([[:digit:]]{1,})", remove = T)
#See if data is normally distributed when mutated with log2
tidyNormData <- tidyNormData %>%
mutate(intensity = log2(intensity))
#Plot histogram for all intensity values.
tidyNormData %>%
ggplot(aes(x = intensity)) + geom_histogram() +
theme_bw()
#Looks pretty normal, just slightly right-skewed.
#But just to check: Make it a little more normal
tidyRNANorm <- tidyNormData %>%
group_by(sample) %>%
mutate(normIntensity = scale(intensity, center = T, scale = T))
#Widen data again from normalized state
statsRNANorm <- tidyRNANorm[,-c(4)] %>%
unite("sm", sample:group, sep = "", remove = T) %>%
# sep = 3 means the first 3 letters. This value does not matter, can be anything
separate(sm, into = "group", sep = 3, remove = F)
genRef <- statsRNANorm[,c(1)] %>% distinct()
# This is the most important step for ANOVA - grouping
groupedRNAStats <- statsRNANorm %>%
pivot_wider(names_from = "Gene", values_from = "normIntensity")
# Convert into dataframe
groupedRNAStats <- as.data.frame(groupedRNAStats)
row.names(groupedRNAStats) <- groupedRNAStats$sm
groupedRNAStats <- groupedRNAStats[,-1] %>%
mutate(group = factor(group, levels = c("AET", "MET", "SED")))
# Compare AET vs AET+MET groups
# Note: Since in this project, we have not tested for MET only
# So, MET means AET+MET unless otherwise specified
rawDGE_AET_vs_MET <- read_excel("Genes_AET_vs_AET+MET.xlsx")
curatedDGE_AET_vs_MET <- rawDGE_AET_vs_MET[,c(8,2,5,6,7)]
colnames(curatedDGE_AET_vs_MET) <- c("Symbol", "logFC", "pval", "FDR", "Group")
# Add a column named direction, to show whether this gene is UP-regulated
# or DOWN-regulated after the MET treatment
curatedDGE_AET_vs_MET <- curatedDGE_AET_vs_MET %>%
mutate("logFDR" = -log(FDR)) %>%
mutate(direction = case_when(FDR < 0.05 & logFC > 0 ~ "UP",
FDR < 0.05 & logFC < 0 ~ "DOWN",
FDR >= 0.05 ~ "NS"))
totExpressed_AET_vs_MET <- curatedDGE_AET_vs_MET %>%
tally() %>%
mutate(direction = "all trans")
sigDirection_AET_vs_MET <- curatedDGE_AET_vs_MET %>%
group_by(direction) %>%
tally()
allSig_AET_vs_MET <- curatedDGE_AET_vs_MET %>%
filter(direction != "NS") %>%
tally() %>%
mutate(direction = "normal Sig")
restrictSig_AET_vs_MET <- curatedDGE_AET_vs_MET %>%
filter(FDR <= 0.01) %>%
tally() %>%
mutate(direction = "restrictive Sig")
# Plot transcript categories
transcriptBreakdown <- bind_rows(totExpressed_AET_vs_MET, sigDirection_AET_vs_MET,
allSig_AET_vs_MET, restrictSig_AET_vs_MET)
transcriptNumsPlot <- transcriptBreakdown %>%
arrange(match(direction, c("all trans", "DOWN", "UP",
"normal Sig", "NS",
"restrictive Sig")),
desc(direction)) %>%
mutate(direction = factor(direction, levels = direction)) %>%
ggplot(aes(x = direction, y = n,
fill = direction)) + geom_col(color = "black",
size = 0.25) +
xlab("Transcript Category") + ylab("count") + theme_bw() +
theme(axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.position = "none") +
# 10000 is the number of rows in curatedDGE
scale_y_continuous(expand = c(0,0), limits = c(0, 10000)) +
geom_text(aes(label = n), vjust = -0.5) +
scale_fill_manual(values = c("black", "#808080",
"#524fa1", "#fdb913",
"red", "cyan"))
ggsave("transcriptCategories_AET_vs_MET.pdf", transcriptNumsPlot,
height = 4, width = 4)
# Plot volcano plots
volcanoPlot <- curatedDGE_AET_vs_MET %>%
ggplot(aes(logFC, logFDR, color = direction)) +
geom_point(size = 2) + theme_bw() +
theme(axis.line = element_line(color = "black"),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = c("#662d91",
"#999999", "#ed1c24")) +
xlab(expression(paste("Log"[2],"(FC)"))) +
ylab(expression(paste("-log"[10],"(FDR)"))) +
ggtitle("Volcano plot of AET+MET vs AET Control")
ggsave("Volcano_AET_vs_AET+MET.pdf", volcanoPlot, height = 4, width = 4)
# Extract restrictively significant genes
sigGenes_AET_vs_MET <- curatedDGE_AET_vs_MET[,c("Symbol", "logFC","FDR")] %>%
filter(FDR < 0.01) %>%
# Calculate the non-log fold change and filter out rows with values smaller than 50%
# log2(1.5) is about 0.5849, we take 0.58 here
filter(abs(logFC)>= 0.58)
write.csv(sigGenes_AET_vs_MET, file = "sigGenes_AET_vs_MET.csv")
# Run the enrichedKEGG GSEA Pathway analysis
pathGenerate <- function(geneset, geneType){
# Map the EMSEMBL IDs to their ENTREZID
sameGenesEntrez <- na.exclude(mapIds(org.Mm.eg.db,
keys = as.character(geneset$Symbol),
keytype = "GENENAME", column = "ENTREZID"))
# Function for enrichKEGG analysis and pathway dataset generation
# By default, this works on mouse (mmu) only
allPaths <- enrichKEGG(gene = sameGenesEntrez, organism = "mmu")
write.csv(allPaths, file = paste("allPaths_",geneType,".csv",sep = ""))
allPaths <- as.data.frame(allPaths) %>%
mutate(bkgdSize =
as.numeric(substring(BgRatio,
regexpr("/", BgRatio) + 1))) %>%
mutate(pathBkgd =
as.numeric(substring(BgRatio, 1,
regexpr("/", BgRatio)-1))) %>%
mutate(bkgdPerc = pathBkgd/bkgdSize) %>%
mutate(GeneRatTotal =
as.numeric(substring(GeneRatio,
regexpr("/", GeneRatio) + 1))) %>%
mutate(percPath = Count/GeneRatTotal) %>%
mutate(Enrichment = percPath/bkgdPerc)
return(allPaths)
}
stringentPathPlot <- function(pathway, title){
pdf(paste(title,"KEGG pathways p less than 0.01.pdf",sep=" "))
plot(  pathway %>%
filter(p.adjust < 0.01) %>%
ggplot(aes(x = Enrichment, y = Description,
color = p.adjust, size = Count)) +
geom_point() + expand_limits(x = 0) +
labs(x = "Enrichment", y = "KEGG pathway",
color = "FDR", size = "Count") +
theme_bw() + scale_color_gradient(low = "#B72668",
high = "#dba3b2") +
ggtitle(paste(title,"KEGG pathways p < 0.01", sep = " ")))
dev.off()
}
relaxedPathPlot <- function(pathway, title){
pdf(paste(title,"KEGG p between 0.05 and 0.01.pdf",sep=" "))
plot(pathway %>%
filter(p.adjust < 0.05 & p.adjust >= 0.01) %>%
ggplot(aes(x = Enrichment, y = Description,
color = p.adjust, size = Count)) +
geom_point() + expand_limits(x = 0) +
labs(x = "Enrichment", y = "KEGG pathway",
color = "FDR", size = "Count") +
theme_bw() + scale_color_gradient(low = "#B72668",
high = "#dba3b2") +
ggtitle(paste(title,"KEGG pathways 0.05 < p < 0.01", sep = " ")))
dev.off()
}
allPaths_AET_vs_MET = pathGenerate(sigGenes_AET_vs_MET, "AET vs. AET+MET")
View(sigGenes_AET_vs_MET)
allPaths_AET_vs_MET = pathGenerate(sigGenes_AET_vs_MET, "AET vs. AET+MET")
